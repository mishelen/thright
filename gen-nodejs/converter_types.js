//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = module.exports = {};
Batch = module.exports.Batch = function(args) {
  this.am1 = null;
  this.cur1 = null;
  this.cur2 = null;
  if (args) {
    if (args.am1 !== undefined) {
      this.am1 = args.am1;
    }
    if (args.cur1 !== undefined) {
      this.cur1 = args.cur1;
    }
    if (args.cur2 !== undefined) {
      this.cur2 = args.cur2;
    }
  }
};
Batch.prototype = {};
Batch.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.am1 = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.cur1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cur2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Batch.prototype.write = function(output) {
  output.writeStructBegin('Batch');
  if (this.am1 !== null && this.am1 !== undefined) {
    output.writeFieldBegin('am1', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.am1);
    output.writeFieldEnd();
  }
  if (this.cur1 !== null && this.cur1 !== undefined) {
    output.writeFieldBegin('cur1', Thrift.Type.STRING, 2);
    output.writeString(this.cur1);
    output.writeFieldEnd();
  }
  if (this.cur2 !== null && this.cur2 !== undefined) {
    output.writeFieldBegin('cur2', Thrift.Type.STRING, 3);
    output.writeString(this.cur2);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

