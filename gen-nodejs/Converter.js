//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./converter_types');
//HELPER FUNCTIONS AND STRUCTURES

Converter_convert_args = function(args) {
  this.logid = null;
  this.batch = null;
  if (args) {
    if (args.logid !== undefined) {
      this.logid = args.logid;
    }
    if (args.batch !== undefined) {
      this.batch = args.batch;
    }
  }
};
Converter_convert_args.prototype = {};
Converter_convert_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.logid = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.batch = new ttypes.Batch();
        this.batch.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Converter_convert_args.prototype.write = function(output) {
  output.writeStructBegin('Converter_convert_args');
  if (this.logid !== null && this.logid !== undefined) {
    output.writeFieldBegin('logid', Thrift.Type.I32, 1);
    output.writeI32(this.logid);
    output.writeFieldEnd();
  }
  if (this.batch !== null && this.batch !== undefined) {
    output.writeFieldBegin('batch', Thrift.Type.STRUCT, 2);
    this.batch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Converter_convert_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Converter_convert_result.prototype = {};
Converter_convert_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.DOUBLE) {
        this.success = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Converter_convert_result.prototype.write = function(output) {
  output.writeStructBegin('Converter_convert_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.DOUBLE, 0);
    output.writeDouble(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Converter_getCurrencies_args = function(args) {
};
Converter_getCurrencies_args.prototype = {};
Converter_getCurrencies_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Converter_getCurrencies_args.prototype.write = function(output) {
  output.writeStructBegin('Converter_getCurrencies_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Converter_getCurrencies_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Converter_getCurrencies_result.prototype = {};
Converter_getCurrencies_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.success = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = input.readDouble();
          this.success[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Converter_getCurrencies_result.prototype.write = function(output) {
  output.writeStructBegin('Converter_getCurrencies_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.DOUBLE, Thrift.objectLength(this.success));
    for (var kiter8 in this.success)
    {
      if (this.success.hasOwnProperty(kiter8))
      {
        var viter9 = this.success[kiter8];
        output.writeString(kiter8);
        output.writeDouble(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ConverterClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
ConverterClient.prototype = {};
ConverterClient.prototype.convert = function(logid, batch, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_convert(logid, batch);
};

ConverterClient.prototype.send_convert = function(logid, batch) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('convert', Thrift.MessageType.CALL, this.seqid);
  var args = new Converter_convert_args();
  args.logid = logid;
  args.batch = batch;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ConverterClient.prototype.recv_convert = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Converter_convert_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('convert failed: unknown result');
};
ConverterClient.prototype.getCurrencies = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getCurrencies();
};

ConverterClient.prototype.send_getCurrencies = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCurrencies', Thrift.MessageType.CALL, this.seqid);
  var args = new Converter_getCurrencies_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ConverterClient.prototype.recv_getCurrencies = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Converter_getCurrencies_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCurrencies failed: unknown result');
};
ConverterProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
ConverterProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

ConverterProcessor.prototype.process_convert = function(seqid, input, output) {
  var args = new Converter_convert_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.convert(args.logid, args.batch, function (err, result) {
    var result = new Converter_convert_result((err != null ? err : {success: result}));
    output.writeMessageBegin("convert", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ConverterProcessor.prototype.process_getCurrencies = function(seqid, input, output) {
  var args = new Converter_getCurrencies_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getCurrencies(function (err, result) {
    var result = new Converter_getCurrencies_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getCurrencies", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

